# docker-compose.yml - FIXED VERSION
services:
  db:
    image: pgvector/pgvector:pg15
    container_name: global-gate-db
    environment:
      POSTGRES_DB: ${DB_DATABASE:-global_gate}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-qeqe}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_DATABASE:-global_gate}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    networks:
      - turkish_airlines_net
    restart: unless-stopped

  scraper:
    build:
      context: .
      dockerfile: docker/Dockerfile.scraper
    container_name: global-gate-scraper
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-global_gate}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-qeqe}
    command: python scraper_only.py
    restart: "no"
    networks:
      - turkish_airlines_net
    volumes:
      - model_cache:/app/model_cache

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: global-gate-api
    depends_on:
      db:
        condition: service_healthy
      scraper:
        condition: service_completed_successfully
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-global_gate}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-qeqe}
      DB_MIN_POOL_SIZE: 5
      DB_MAX_POOL_SIZE: 20
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      ASSEMBLYAI_API_KEY: ${ASSEMBLYAI_API_KEY}
      PYTHONUNBUFFERED: 1
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    command: uvicorn myapp:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 1800s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - turkish_airlines_net
    volumes:
      - model_cache:/app/model_cache

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.react  # ✅ React için doğru dockerfile
    container_name: global-gate-frontend
    depends_on:
      api:
        condition: service_healthy  # ✅ API hazır olana kadar bekler
    environment:
      # React için environment variables (build time)
      REACT_APP_API_URL: http://localhost:8000
      VITE_API_URL: http://localhost:8000  # Vite için
    ports:
      - "8501:3000"  # ✅ React için doğru port
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - turkish_airlines_net

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: global-gate-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    networks:
      - turkish_airlines_net
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: global-gate-prometheus
    depends_on:
      - api
      - node-exporter
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=7d'
    networks:
      - turkish_airlines_net
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: global-gate-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - turkish_airlines_net
    restart: unless-stopped

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  model_cache:

networks:
  turkish_airlines_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16