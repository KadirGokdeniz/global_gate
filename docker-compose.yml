# docker-compose.yml - ENHANCED VERSION
# Improved dependencies and health checks

services:
  # 1. Database (ilk başlar)
  db:
    image: pgvector/pgvector:pg15
    container_name: global-gate-db
    environment:
      POSTGRES_DB: ${DB_DATABASE:-global_gate}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-qeqe}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_DATABASE:-global_gate}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - turkish_airlines_net

  # 2. Data Scraper (ikinci çalışır, işini bitirir, kapanır)
  scraper:
    build:
      context: .
      dockerfile: Dockerfile.scraper
    container_name: global-gate-scraper
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE:-global_gate}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-qeqe}
    command: python scraper_only.py
    restart: "no"  # Bir kez çalışır, kapanır
    networks:
      - turkish_airlines_net

  # 3. FastAPI Backend (üçüncü başlar)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: global-gate-api
    depends_on:
      db:
        condition: service_healthy
      scraper:
        condition: service_completed_successfully
    environment:
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE:-global_gate}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-qeqe}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    command: uvicorn myapp:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s  # More time for model loading
    restart: unless-stopped
    networks:
      - turkish_airlines_net

  # 4. Streamlit Frontend (en son başlar)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: global-gate-frontend
    depends_on:
      api:
        condition: service_healthy
    environment:
      - DEFAULT_API_URL=http://api:8000
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    ports:
      - "8501:8501"
    command: streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0 --server.headless true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - turkish_airlines_net

volumes:
  postgres_data:

networks:
  turkish_airlines_net:
    driver: bridge